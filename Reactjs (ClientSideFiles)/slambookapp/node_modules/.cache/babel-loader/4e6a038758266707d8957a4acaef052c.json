{"ast":null,"code":"import { API_BASE_URL, POLL_LIST_SIZE, ACCESS_TOKEN } from \"../constants\";\nexport var request = function request(options) {\n  var headers = new Headers({\n    \"Content-Type\": \"application/json\"\n  });\n\n  if (localStorage.getItem(ACCESS_TOKEN)) {\n    headers.append(\"Authorization\", \"Bearer \" + localStorage.getItem(ACCESS_TOKEN));\n  }\n\n  var defaults = {\n    headers: headers\n  };\n  options = Object.assign({}, defaults, options);\n  return fetch(options.url, options).then(function (response) {\n    return response.json().then(function (json) {\n      if (!response.ok) {\n        return Promise.reject(json);\n      }\n\n      return json;\n    });\n  });\n};\nexport function getAllPolls(page, size) {\n  page = page || 0;\n  size = size || POLL_LIST_SIZE;\n  return request({\n    url: API_BASE_URL + \"/polls?page=\" + page + \"&size=\" + size,\n    method: \"GET\"\n  });\n}\nexport function createPoll(pollData) {\n  return request({\n    url: API_BASE_URL + \"/polls\",\n    method: \"POST\",\n    body: JSON.stringify(pollData)\n  });\n}\nexport function castVote(voteData) {\n  return request({\n    url: API_BASE_URL + \"/polls/\" + voteData.pollId + \"/votes\",\n    method: \"POST\",\n    body: JSON.stringify(voteData)\n  });\n}\nexport function login(loginRequest) {\n  return request({\n    url: API_BASE_URL + \"/auth/signin\",\n    method: \"POST\",\n    body: JSON.stringify(loginRequest)\n  });\n}\nexport function signup(signupRequest) {\n  return request({\n    url: API_BASE_URL + \"/auth/signup\",\n    method: \"POST\",\n    body: JSON.stringify(signupRequest)\n  });\n}\nexport function checkUsernameAvailability(username) {\n  return request({\n    url: API_BASE_URL + \"/user/checkUsernameAvailability?username=\" + username,\n    method: \"GET\"\n  });\n}\nexport function checkEmailAvailability(email) {\n  return request({\n    url: API_BASE_URL + \"/user/checkEmailAvailability?email=\" + email,\n    method: \"GET\"\n  });\n}\nexport function getCurrentUser() {\n  if (!localStorage.getItem(ACCESS_TOKEN)) {\n    return Promise.reject(\"No access token set.\");\n  }\n\n  return request({\n    url: API_BASE_URL + \"/user/me\",\n    method: \"GET\"\n  });\n}\nexport function getUserProfile(username) {\n  return request({\n    url: API_BASE_URL + \"/users/\" + username,\n    method: \"GET\"\n  });\n}\nexport function getSlams(emailid) {\n  return request({\n    url: API_BASE_URL + \"/slams/\" + emailid,\n    method: \"GET\"\n  });\n}\nexport function getSlamById(id) {\n  return request({\n    url: API_BASE_URL + \"/slam/\" + id,\n    method: \"GET\"\n  });\n}\nexport function sendSlam(sendSlamRequest) {\n  return request({\n    url: API_BASE_URL + \"/slam\",\n    method: \"POST\",\n    body: JSON.stringify(sendSlamRequest)\n  });\n}\nexport function getUserCreatedPolls(username, page, size) {\n  page = page || 0;\n  size = size || POLL_LIST_SIZE;\n  return request({\n    url: API_BASE_URL + \"/users/\" + username + \"/polls?page=\" + page + \"&size=\" + size,\n    method: \"GET\"\n  });\n}\nexport function getUserVotedPolls(username, page, size) {\n  page = page || 0;\n  size = size || POLL_LIST_SIZE;\n  return request({\n    url: API_BASE_URL + \"/users/\" + username + \"/votes?page=\" + page + \"&size=\" + size,\n    method: \"GET\"\n  });\n}","map":{"version":3,"sources":["C:\\Users\\devan\\Desktop\\myProjectYard\\slambookapp\\src\\util\\APIUtils.js"],"names":["API_BASE_URL","POLL_LIST_SIZE","ACCESS_TOKEN","request","options","headers","Headers","localStorage","getItem","append","defaults","Object","assign","fetch","url","then","response","json","ok","Promise","reject","getAllPolls","page","size","method","createPoll","pollData","body","JSON","stringify","castVote","voteData","pollId","login","loginRequest","signup","signupRequest","checkUsernameAvailability","username","checkEmailAvailability","email","getCurrentUser","getUserProfile","getSlams","emailid","getSlamById","id","sendSlam","sendSlamRequest","getUserCreatedPolls","getUserVotedPolls"],"mappings":"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","sourcesContent":["import { API_BASE_URL, POLL_LIST_SIZE, ACCESS_TOKEN } from \"../constants\";\n\nexport const request = options => {\n  const headers = new Headers({\n    \"Content-Type\": \"application/json\"\n  });\n\n  if (localStorage.getItem(ACCESS_TOKEN)) {\n    headers.append(\n      \"Authorization\",\n      \"Bearer \" + localStorage.getItem(ACCESS_TOKEN)\n    );\n  }\n\n  const defaults = { headers: headers };\n  options = Object.assign({}, defaults, options);\n\n  return fetch(options.url, options).then(response =>\n    response.json().then(json => {\n      if (!response.ok) {\n        return Promise.reject(json);\n      }\n      return json;\n    })\n  );\n};\n\nexport function getAllPolls(page, size) {\n  page = page || 0;\n  size = size || POLL_LIST_SIZE;\n\n  return request({\n    url: API_BASE_URL + \"/polls?page=\" + page + \"&size=\" + size,\n    method: \"GET\"\n  });\n}\n\nexport function createPoll(pollData) {\n  return request({\n    url: API_BASE_URL + \"/polls\",\n    method: \"POST\",\n    body: JSON.stringify(pollData)\n  });\n}\n\nexport function castVote(voteData) {\n  return request({\n    url: API_BASE_URL + \"/polls/\" + voteData.pollId + \"/votes\",\n    method: \"POST\",\n    body: JSON.stringify(voteData)\n  });\n}\n\nexport function login(loginRequest) {\n  return request({\n    url: API_BASE_URL + \"/auth/signin\",\n    method: \"POST\",\n    body: JSON.stringify(loginRequest)\n  });\n}\n\nexport function signup(signupRequest) {\n  return request({\n    url: API_BASE_URL + \"/auth/signup\",\n    method: \"POST\",\n    body: JSON.stringify(signupRequest)\n  });\n}\n\nexport function checkUsernameAvailability(username) {\n  return request({\n    url: API_BASE_URL + \"/user/checkUsernameAvailability?username=\" + username,\n    method: \"GET\"\n  });\n}\n\nexport function checkEmailAvailability(email) {\n  return request({\n    url: API_BASE_URL + \"/user/checkEmailAvailability?email=\" + email,\n    method: \"GET\"\n  });\n}\n\nexport function getCurrentUser() {\n  if (!localStorage.getItem(ACCESS_TOKEN)) {\n    return Promise.reject(\"No access token set.\");\n  }\n\n  return request({\n    url: API_BASE_URL + \"/user/me\",\n    method: \"GET\"\n  });\n}\n\nexport function getUserProfile(username) {\n  return request({\n    url: API_BASE_URL + \"/users/\" + username,\n    method: \"GET\"\n  });\n}\n\nexport function getSlams(emailid) {\n  return request({\n    url: API_BASE_URL + \"/slams/\" + emailid,\n    method: \"GET\"\n  });\n}\nexport function getSlamById(id) {\n  return request({\n    url: API_BASE_URL + \"/slam/\" + id,\n    method: \"GET\"\n  });\n}\nexport function sendSlam(sendSlamRequest) {\n  return request({\n    url: API_BASE_URL + \"/slam\",\n    method: \"POST\",\n    body: JSON.stringify(sendSlamRequest)\n  });\n}\n\nexport function getUserCreatedPolls(username, page, size) {\n  page = page || 0;\n  size = size || POLL_LIST_SIZE;\n\n  return request({\n    url:\n      API_BASE_URL +\n      \"/users/\" +\n      username +\n      \"/polls?page=\" +\n      page +\n      \"&size=\" +\n      size,\n    method: \"GET\"\n  });\n}\n\nexport function getUserVotedPolls(username, page, size) {\n  page = page || 0;\n  size = size || POLL_LIST_SIZE;\n\n  return request({\n    url:\n      API_BASE_URL +\n      \"/users/\" +\n      username +\n      \"/votes?page=\" +\n      page +\n      \"&size=\" +\n      size,\n    method: \"GET\"\n  });\n}\n"]},"metadata":{},"sourceType":"module"}