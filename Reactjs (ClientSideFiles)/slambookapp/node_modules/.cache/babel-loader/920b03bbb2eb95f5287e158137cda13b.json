{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\devan\\\\Desktop\\\\myProjectYard\\\\slambookapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\Users\\\\devan\\\\Desktop\\\\myProjectYard\\\\slambookapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\devan\\\\Desktop\\\\myProjectYard\\\\slambookapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\devan\\\\Desktop\\\\myProjectYard\\\\slambookapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\devan\\\\Desktop\\\\myProjectYard\\\\slambookapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\devan\\\\Desktop\\\\myProjectYard\\\\slambookapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\devan\\\\Desktop\\\\myProjectYard\\\\slambookapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\devan\\\\Desktop\\\\myProjectYard\\\\slambookapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\devan\\\\Desktop\\\\myProjectYard\\\\slambookapp\\\\src\\\\user\\\\signup\\\\Signup.js\";\nimport React, { Component } from 'react';\nimport { signup, checkUsernameAvailability, checkEmailAvailability } from '../../util/APIUtils';\nimport './Signup.css';\nimport { Link } from 'react-router-dom';\nimport { NAME_MIN_LENGTH, NAME_MAX_LENGTH, USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH, EMAIL_MAX_LENGTH, PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH } from '../../constants';\nimport { Form, Input, Button, notification } from 'antd';\nvar FormItem = Form.Item;\n\nvar Signup =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Signup, _Component);\n\n  function Signup(props) {\n    var _this;\n\n    _classCallCheck(this, Signup);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Signup).call(this, props));\n\n    _this.validateName = function (name) {\n      if (name.length < NAME_MIN_LENGTH) {\n        return {\n          validateStatus: 'error',\n          errorMsg: \"Name is too short (Minimum \".concat(NAME_MIN_LENGTH, \" characters needed.)\")\n        };\n      } else if (name.length > NAME_MAX_LENGTH) {\n        return {\n          validationStatus: 'error',\n          errorMsg: \"Name is too long (Maximum \".concat(NAME_MAX_LENGTH, \" characters allowed.)\")\n        };\n      } else {\n        return {\n          validateStatus: 'success',\n          errorMsg: null\n        };\n      }\n    };\n\n    _this.validateEmail = function (email) {\n      if (!email) {\n        return {\n          validateStatus: 'error',\n          errorMsg: 'Email may not be empty'\n        };\n      }\n\n      var EMAIL_REGEX = RegExp('[^@ ]+@[^@ ]+\\\\.[^@ ]+');\n\n      if (!EMAIL_REGEX.test(email)) {\n        return {\n          validateStatus: 'error',\n          errorMsg: 'Email not valid'\n        };\n      }\n\n      if (email.length > EMAIL_MAX_LENGTH) {\n        return {\n          validateStatus: 'error',\n          errorMsg: \"Email is too long (Maximum \".concat(EMAIL_MAX_LENGTH, \" characters allowed)\")\n        };\n      }\n\n      return {\n        validateStatus: null,\n        errorMsg: null\n      };\n    };\n\n    _this.validateUsername = function (username) {\n      if (username.length < USERNAME_MIN_LENGTH) {\n        return {\n          validateStatus: 'error',\n          errorMsg: \"Username is too short (Minimum \".concat(USERNAME_MIN_LENGTH, \" characters needed.)\")\n        };\n      } else if (username.length > USERNAME_MAX_LENGTH) {\n        return {\n          validationStatus: 'error',\n          errorMsg: \"Username is too long (Maximum \".concat(USERNAME_MAX_LENGTH, \" characters allowed.)\")\n        };\n      } else {\n        return {\n          validateStatus: null,\n          errorMsg: null\n        };\n      }\n    };\n\n    _this.validatePassword = function (password) {\n      if (password.length < PASSWORD_MIN_LENGTH) {\n        return {\n          validateStatus: 'error',\n          errorMsg: \"Password is too short (Minimum \".concat(PASSWORD_MIN_LENGTH, \" characters needed.)\")\n        };\n      } else if (password.length > PASSWORD_MAX_LENGTH) {\n        return {\n          validationStatus: 'error',\n          errorMsg: \"Password is too long (Maximum \".concat(PASSWORD_MAX_LENGTH, \" characters allowed.)\")\n        };\n      } else {\n        return {\n          validateStatus: 'success',\n          errorMsg: null\n        };\n      }\n    };\n\n    _this.state = {\n      name: {\n        value: ''\n      },\n      username: {\n        value: ''\n      },\n      email: {\n        value: ''\n      },\n      password: {\n        value: ''\n      }\n    };\n    _this.handleInputChange = _this.handleInputChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.validateUsernameAvailability = _this.validateUsernameAvailability.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.validateEmailAvailability = _this.validateEmailAvailability.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.isFormInvalid = _this.isFormInvalid.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Signup, [{\n    key: \"handleInputChange\",\n    value: function handleInputChange(event, validationFun) {\n      var target = event.target;\n      var inputName = target.name;\n      var inputValue = target.value;\n      this.setState(_defineProperty({}, inputName, _objectSpread({\n        value: inputValue\n      }, validationFun(inputValue))));\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      var _this2 = this;\n\n      event.preventDefault();\n      var signupRequest = {\n        name: this.state.name.value,\n        email: this.state.email.value,\n        username: this.state.username.value,\n        password: this.state.password.value\n      };\n      signup(signupRequest).then(function (response) {\n        notification.success({\n          message: 'Polling App',\n          description: \"Thank you! You're successfully registered. Please Login to continue!\"\n        });\n\n        _this2.props.history.push(\"/login\");\n      }).catch(function (error) {\n        notification.error({\n          message: 'Polling App',\n          description: error.message || 'Sorry! Something went wrong. Please try again!'\n        });\n      });\n    }\n  }, {\n    key: \"isFormInvalid\",\n    value: function isFormInvalid() {\n      return !(this.state.name.validateStatus === 'success' && this.state.username.validateStatus === 'success' && this.state.email.validateStatus === 'success' && this.state.password.validateStatus === 'success');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: \"signup-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"page-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"Sign Up\"), React.createElement(\"div\", {\n        className: \"signup-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        className: \"signup-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(FormItem, {\n        label: \"Full Name\",\n        validateStatus: this.state.name.validateStatus,\n        help: this.state.name.errorMsg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(Input, {\n        size: \"large\",\n        name: \"name\",\n        autoComplete: \"off\",\n        placeholder: \"Your full name\",\n        value: this.state.name.value,\n        onChange: function onChange(event) {\n          return _this3.handleInputChange(event, _this3.validateName);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      })), React.createElement(FormItem, {\n        label: \"Username\",\n        hasFeedback: true,\n        validateStatus: this.state.username.validateStatus,\n        help: this.state.username.errorMsg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(Input, {\n        size: \"large\",\n        name: \"username\",\n        autoComplete: \"off\",\n        placeholder: \"A unique username\",\n        value: this.state.username.value,\n        onBlur: this.validateUsernameAvailability,\n        onChange: function onChange(event) {\n          return _this3.handleInputChange(event, _this3.validateUsername);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      })), React.createElement(FormItem, {\n        label: \"Email\",\n        hasFeedback: true,\n        validateStatus: this.state.email.validateStatus,\n        help: this.state.email.errorMsg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(Input, {\n        size: \"large\",\n        name: \"email\",\n        type: \"email\",\n        autoComplete: \"off\",\n        placeholder: \"Your email\",\n        value: this.state.email.value,\n        onBlur: this.validateEmailAvailability,\n        onChange: function onChange(event) {\n          return _this3.handleInputChange(event, _this3.validateEmail);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      })), React.createElement(FormItem, {\n        label: \"Password\",\n        validateStatus: this.state.password.validateStatus,\n        help: this.state.password.errorMsg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(Input, {\n        size: \"large\",\n        name: \"password\",\n        type: \"password\",\n        autoComplete: \"off\",\n        placeholder: \"A password between 6 to 20 characters\",\n        value: this.state.password.value,\n        onChange: function onChange(event) {\n          return _this3.handleInputChange(event, _this3.validatePassword);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      })), React.createElement(FormItem, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        size: \"large\",\n        className: \"signup-form-button\",\n        disabled: this.isFormInvalid(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, \"Sign up\"), \"Already registed? \", React.createElement(Link, {\n        to: \"/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, \"Login now!\")))));\n    } // Validation Functions\n\n  }, {\n    key: \"validateUsernameAvailability\",\n    value: function validateUsernameAvailability() {\n      var _this4 = this;\n\n      // First check for client side errors in username\n      var usernameValue = this.state.username.value;\n      var usernameValidation = this.validateUsername(usernameValue);\n\n      if (usernameValidation.validateStatus === 'error') {\n        this.setState({\n          username: _objectSpread({\n            value: usernameValue\n          }, usernameValidation)\n        });\n        return;\n      }\n\n      this.setState({\n        username: {\n          value: usernameValue,\n          validateStatus: 'validating',\n          errorMsg: null\n        }\n      });\n      checkUsernameAvailability(usernameValue).then(function (response) {\n        if (response.available) {\n          _this4.setState({\n            username: {\n              value: usernameValue,\n              validateStatus: 'success',\n              errorMsg: null\n            }\n          });\n        } else {\n          _this4.setState({\n            username: {\n              value: usernameValue,\n              validateStatus: 'error',\n              errorMsg: 'This username is already taken'\n            }\n          });\n        }\n      }).catch(function (error) {\n        // Marking validateStatus as success, Form will be recchecked at server\n        _this4.setState({\n          username: {\n            value: usernameValue,\n            validateStatus: 'success',\n            errorMsg: null\n          }\n        });\n      });\n    }\n  }, {\n    key: \"validateEmailAvailability\",\n    value: function validateEmailAvailability() {\n      var _this5 = this;\n\n      // First check for client side errors in email\n      var emailValue = this.state.email.value;\n      var emailValidation = this.validateEmail(emailValue);\n\n      if (emailValidation.validateStatus === 'error') {\n        this.setState({\n          email: _objectSpread({\n            value: emailValue\n          }, emailValidation)\n        });\n        return;\n      }\n\n      this.setState({\n        email: {\n          value: emailValue,\n          validateStatus: 'validating',\n          errorMsg: null\n        }\n      });\n      checkEmailAvailability(emailValue).then(function (response) {\n        if (response.available) {\n          _this5.setState({\n            email: {\n              value: emailValue,\n              validateStatus: 'success',\n              errorMsg: null\n            }\n          });\n        } else {\n          _this5.setState({\n            email: {\n              value: emailValue,\n              validateStatus: 'error',\n              errorMsg: 'This Email is already registered'\n            }\n          });\n        }\n      }).catch(function (error) {\n        // Marking validateStatus as success, Form will be recchecked at server\n        _this5.setState({\n          email: {\n            value: emailValue,\n            validateStatus: 'success',\n            errorMsg: null\n          }\n        });\n      });\n    }\n  }]);\n\n  return Signup;\n}(Component);\n\nexport default Signup;","map":{"version":3,"sources":["C:\\Users\\devan\\Desktop\\myProjectYard\\slambookapp\\src\\user\\signup\\Signup.js"],"names":["React","Component","signup","checkUsernameAvailability","checkEmailAvailability","Link","NAME_MIN_LENGTH","NAME_MAX_LENGTH","USERNAME_MIN_LENGTH","USERNAME_MAX_LENGTH","EMAIL_MAX_LENGTH","PASSWORD_MIN_LENGTH","PASSWORD_MAX_LENGTH","Form","Input","Button","notification","FormItem","Item","Signup","props","validateName","name","length","validateStatus","errorMsg","validationStatus","validateEmail","email","EMAIL_REGEX","RegExp","test","validateUsername","username","validatePassword","password","state","value","handleInputChange","bind","handleSubmit","validateUsernameAvailability","validateEmailAvailability","isFormInvalid","event","validationFun","target","inputName","inputValue","setState","preventDefault","signupRequest","then","response","success","message","description","history","push","catch","error","usernameValue","usernameValidation","available","emailValue","emailValidation"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { signup, checkUsernameAvailability, checkEmailAvailability } from '../../util/APIUtils';\nimport './Signup.css';\nimport { Link } from 'react-router-dom';\nimport { \n    NAME_MIN_LENGTH, NAME_MAX_LENGTH, \n    USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH,\n    EMAIL_MAX_LENGTH,\n    PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH\n} from '../../constants';\n\nimport { Form, Input, Button, notification } from 'antd';\nconst FormItem = Form.Item;\n\nclass Signup extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: {\n                value: ''\n            },\n            username: {\n                value: ''\n            },\n            email: {\n                value: ''\n            },\n            password: {\n                value: ''\n            }\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.validateUsernameAvailability = this.validateUsernameAvailability.bind(this);\n        this.validateEmailAvailability = this.validateEmailAvailability.bind(this);\n        this.isFormInvalid = this.isFormInvalid.bind(this);\n    }\n\n    handleInputChange(event, validationFun) {\n        const target = event.target;\n        const inputName = target.name;        \n        const inputValue = target.value;\n\n        this.setState({\n            [inputName] : {\n                value: inputValue,\n                ...validationFun(inputValue)\n            }\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n    \n        const signupRequest = {\n            name: this.state.name.value,\n            email: this.state.email.value,\n            username: this.state.username.value,\n            password: this.state.password.value\n        };\n        signup(signupRequest)\n        .then(response => {\n            notification.success({\n                message: 'Polling App',\n                description: \"Thank you! You're successfully registered. Please Login to continue!\",\n            });          \n            this.props.history.push(\"/login\");\n        }).catch(error => {\n            notification.error({\n                message: 'Polling App',\n                description: error.message || 'Sorry! Something went wrong. Please try again!'\n            });\n        });\n    }\n\n    isFormInvalid() {\n        return !(this.state.name.validateStatus === 'success' &&\n            this.state.username.validateStatus === 'success' &&\n            this.state.email.validateStatus === 'success' &&\n            this.state.password.validateStatus === 'success'\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"signup-container\">\n                <h1 className=\"page-title\">Sign Up</h1>\n                <div className=\"signup-content\">\n                    <Form onSubmit={this.handleSubmit} className=\"signup-form\">\n                        <FormItem \n                            label=\"Full Name\"\n                            validateStatus={this.state.name.validateStatus}\n                            help={this.state.name.errorMsg}>\n                            <Input \n                                size=\"large\"\n                                name=\"name\"\n                                autoComplete=\"off\"\n                                placeholder=\"Your full name\"\n                                value={this.state.name.value} \n                                onChange={(event) => this.handleInputChange(event, this.validateName)} />    \n                        </FormItem>\n                        <FormItem label=\"Username\"\n                            hasFeedback\n                            validateStatus={this.state.username.validateStatus}\n                            help={this.state.username.errorMsg}>\n                            <Input \n                                size=\"large\"\n                                name=\"username\" \n                                autoComplete=\"off\"\n                                placeholder=\"A unique username\"\n                                value={this.state.username.value} \n                                onBlur={this.validateUsernameAvailability}\n                                onChange={(event) => this.handleInputChange(event, this.validateUsername)} />    \n                        </FormItem>\n                        <FormItem \n                            label=\"Email\"\n                            hasFeedback\n                            validateStatus={this.state.email.validateStatus}\n                            help={this.state.email.errorMsg}>\n                            <Input \n                                size=\"large\"\n                                name=\"email\" \n                                type=\"email\" \n                                autoComplete=\"off\"\n                                placeholder=\"Your email\"\n                                value={this.state.email.value} \n                                onBlur={this.validateEmailAvailability}\n                                onChange={(event) => this.handleInputChange(event, this.validateEmail)} />    \n                        </FormItem>\n                        <FormItem \n                            label=\"Password\"\n                            validateStatus={this.state.password.validateStatus}\n                            help={this.state.password.errorMsg}>\n                            <Input \n                                size=\"large\"\n                                name=\"password\" \n                                type=\"password\"\n                                autoComplete=\"off\"\n                                placeholder=\"A password between 6 to 20 characters\" \n                                value={this.state.password.value} \n                                onChange={(event) => this.handleInputChange(event, this.validatePassword)} />    \n                        </FormItem>\n                        <FormItem>\n                            <Button type=\"primary\" \n                                htmlType=\"submit\" \n                                size=\"large\" \n                                className=\"signup-form-button\"\n                                disabled={this.isFormInvalid()}>Sign up</Button>\n                            Already registed? <Link to=\"/login\">Login now!</Link>\n                        </FormItem>\n                    </Form>\n                </div>\n            </div>\n        );\n    }\n\n    // Validation Functions\n\n    validateName = (name) => {\n        if(name.length < NAME_MIN_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Name is too short (Minimum ${NAME_MIN_LENGTH} characters needed.)`\n            }\n        } else if (name.length > NAME_MAX_LENGTH) {\n            return {\n                validationStatus: 'error',\n                errorMsg: `Name is too long (Maximum ${NAME_MAX_LENGTH} characters allowed.)`\n            }\n        } else {\n            return {\n                validateStatus: 'success',\n                errorMsg: null,\n              };            \n        }\n    }\n\n    validateEmail = (email) => {\n        if(!email) {\n            return {\n                validateStatus: 'error',\n                errorMsg: 'Email may not be empty'                \n            }\n        }\n\n        const EMAIL_REGEX = RegExp('[^@ ]+@[^@ ]+\\\\.[^@ ]+');\n        if(!EMAIL_REGEX.test(email)) {\n            return {\n                validateStatus: 'error',\n                errorMsg: 'Email not valid'\n            }\n        }\n\n        if(email.length > EMAIL_MAX_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Email is too long (Maximum ${EMAIL_MAX_LENGTH} characters allowed)`\n            }\n        }\n\n        return {\n            validateStatus: null,\n            errorMsg: null\n        }\n    }\n\n    validateUsername = (username) => {\n        if(username.length < USERNAME_MIN_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Username is too short (Minimum ${USERNAME_MIN_LENGTH} characters needed.)`\n            }\n        } else if (username.length > USERNAME_MAX_LENGTH) {\n            return {\n                validationStatus: 'error',\n                errorMsg: `Username is too long (Maximum ${USERNAME_MAX_LENGTH} characters allowed.)`\n            }\n        } else {\n            return {\n                validateStatus: null,\n                errorMsg: null\n            }\n        }\n    }\n\n    validateUsernameAvailability() {\n        // First check for client side errors in username\n        const usernameValue = this.state.username.value;\n        const usernameValidation = this.validateUsername(usernameValue);\n\n        if(usernameValidation.validateStatus === 'error') {\n            this.setState({\n                username: {\n                    value: usernameValue,\n                    ...usernameValidation\n                }\n            });\n            return;\n        }\n\n        this.setState({\n            username: {\n                value: usernameValue,\n                validateStatus: 'validating',\n                errorMsg: null\n            }\n        });\n\n        checkUsernameAvailability(usernameValue)\n        .then(response => {\n            if(response.available) {\n                this.setState({\n                    username: {\n                        value: usernameValue,\n                        validateStatus: 'success',\n                        errorMsg: null\n                    }\n                });\n            } else {\n                this.setState({\n                    username: {\n                        value: usernameValue,\n                        validateStatus: 'error',\n                        errorMsg: 'This username is already taken'\n                    }\n                });\n            }\n        }).catch(error => {\n            // Marking validateStatus as success, Form will be recchecked at server\n            this.setState({\n                username: {\n                    value: usernameValue,\n                    validateStatus: 'success',\n                    errorMsg: null\n                }\n            });\n        });\n    }\n\n    validateEmailAvailability() {\n        // First check for client side errors in email\n        const emailValue = this.state.email.value;\n        const emailValidation = this.validateEmail(emailValue);\n\n        if(emailValidation.validateStatus === 'error') {\n            this.setState({\n                email: {\n                    value: emailValue,\n                    ...emailValidation\n                }\n            });    \n            return;\n        }\n\n        this.setState({\n            email: {\n                value: emailValue,\n                validateStatus: 'validating',\n                errorMsg: null\n            }\n        });\n\n        checkEmailAvailability(emailValue)\n        .then(response => {\n            if(response.available) {\n                this.setState({\n                    email: {\n                        value: emailValue,\n                        validateStatus: 'success',\n                        errorMsg: null\n                    }\n                });\n            } else {\n                this.setState({\n                    email: {\n                        value: emailValue,\n                        validateStatus: 'error',\n                        errorMsg: 'This Email is already registered'\n                    }\n                });\n            }\n        }).catch(error => {\n            // Marking validateStatus as success, Form will be recchecked at server\n            this.setState({\n                email: {\n                    value: emailValue,\n                    validateStatus: 'success',\n                    errorMsg: null\n                }\n            });\n        });\n    }\n\n    validatePassword = (password) => {\n        if(password.length < PASSWORD_MIN_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Password is too short (Minimum ${PASSWORD_MIN_LENGTH} characters needed.)`\n            }\n        } else if (password.length > PASSWORD_MAX_LENGTH) {\n            return {\n                validationStatus: 'error',\n                errorMsg: `Password is too long (Maximum ${PASSWORD_MAX_LENGTH} characters allowed.)`\n            }\n        } else {\n            return {\n                validateStatus: 'success',\n                errorMsg: null,\n            };            \n        }\n    }\n\n}\n\nexport default Signup;"]},"metadata":{},"sourceType":"module"}